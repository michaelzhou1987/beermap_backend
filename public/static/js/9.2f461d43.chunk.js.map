{"version":3,"sources":["queries/queries.js","views/Beerdetail/beerdetail.component.jsx"],"names":["checkExistingUserQuery","gql","_templateObject","getBeersQuery","_templateObject2","getBeerQuery","_templateObject3","getBreweryQuery","_templateObject4","Beerdetail","props","_this","Object","_Users_michaelzhou_Projects_react_projects_beermap_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_michaelzhou_Projects_react_projects_beermap_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_michaelzhou_Projects_react_projects_beermap_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","pageName","data","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","loading","_components_loading_loading_component__WEBPACK_IMPORTED_MODULE_8__","beer","name","breweryName","description","console","log","Component","graphql","options","variables","id","match","params"],"mappings":"khCAEA,IAAMA,EAAyBC,YAAHC,KAStBC,EAAgBF,YAAHG,KAgBbC,EAAeJ,YAAHK,KAgBZC,EAAkBN,YAAHO,mICrCfC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAU,sBACVC,KAAM,MALST,wEAUjB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,UAAKT,KAAKI,MAAMC,UACfL,KAAKJ,MAAMU,KAAKK,QACfJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,MAEAL,EAAAC,EAAAC,cAAA,yBACcT,KAAKJ,MAAMU,KAAKO,KAAKC,KACjCP,EAAAC,EAAAC,cAAA,WAFF,YAGYT,KAAKJ,MAAMU,KAAKO,KAAKE,YAC/BR,EAAAC,EAAAC,cAAA,WAJF,gBAKgBT,KAAKJ,MAAMU,KAAKO,KAAKG,0DAQ3CC,QAAQC,IAAIlB,KAAKJ,cA9BIuB,aAkCVC,sBAAQ7B,IAAc,CAAE8B,QAAS,SAAAzB,GAC9C,MAAO,CACL0B,UAAW,CAACC,GAAG3B,EAAM4B,MAAMC,OAAOF,OAFvBH,CAMbzB","file":"static/js/9.2f461d43.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst checkExistingUserQuery = gql`\n  query existingUser($email: String!) {\n    existingUser(email: $email) {\n      email\n      _id\n    }\n  }\n`;\n\nconst getBeersQuery = gql`\n  query {\n    beers {\n      name\n      _id\n      country\n      state\n      city\n      rate\n      date\n      breweryName\n      description\n    }\n  }\n`;\n\nconst getBeerQuery = gql`\n  query beer ($id: ID!){\n    beer (_id:$id) {\n      name\n      _id\n      country\n      state\n      city\n      rate\n      date\n      breweryName\n      description\n    }\n  }\n`;\n\nconst getBreweryQuery = gql`\n  query {\n    brewerys {\n      name\n      _id\n    }\n  }\n`\n\n\nexport { checkExistingUserQuery, getBeersQuery, getBeerQuery, getBreweryQuery };","import React, { Component } from 'react';\n// import obj from './home.module.scss';\nimport { graphql, compose } from 'react-apollo';\nimport { getBeerQuery } from '../../queries/queries';\nimport Loading from '../../components/loading/loading.component';\n\nclass Beerdetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pageName: 'Beer Map beerdetail',\n      data: null\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"beer-detail-wrapper\">\n        <h1>{this.state.pageName}</h1>\n        {this.props.data.loading ? (\n          <Loading />\n        ) : (\n          <div>\n            Beer Name: {this.props.data.beer.name}\n            <br/>\n            Brewery: {this.props.data.beer.breweryName}\n            <br/>\n            Description: {this.props.data.beer.description}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n}\n\nexport default graphql(getBeerQuery, { options: props => {\n  return {\n    variables: {id:props.match.params.id}\n  }\n}\n})(\n  Beerdetail\n);\n"],"sourceRoot":""}
{"version":3,"sources":["queries/queries.js","views/Registration/registration.component.jsx"],"names":["checkExistingUserQuery","gql","_templateObject","getBeersQuery","_templateObject2","getBeerQuery","_templateObject3","getBreweryQuery","_templateObject4","Option","Select","AutoCompleteOption","AutoComplete","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","formData","_this","props","form","getFieldsValue","validateFieldsAndScroll","err","values","console","log","CREATE_USER","variables","userInput","then","resp","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","checkExistingUser","_callee","_ref2","data","_Users_michaelzhou_Projects_react_projects_beermap_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","axios","post","email","sent","error","msg","stop","getFieldDecorator","this","tailFormItemLayout","wrapperCol","xs","span","offset","sm","prefixSelector","initialValue","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","antd__WEBPACK_IMPORTED_MODULE_12__","style","width","map","website","key","antd__WEBPACK_IMPORTED_MODULE_14__","Object","assign","labelCol","onSubmit","maxWidth","Item","label","validate","trigger","rules","validator","type","message","required","antd__WEBPACK_IMPORTED_MODULE_15__","hasFeedback","Password","onBlur","antd__WEBPACK_IMPORTED_MODULE_16__","title","antd__WEBPACK_IMPORTED_MODULE_17__","whitespace","addonBefore","valuePropName","antd__WEBPACK_IMPORTED_MODULE_18__","href","antd__WEBPACK_IMPORTED_MODULE_19__","htmlType","Component","WrappedRegistrationForm","Form","create","name","compose","graphql"],"mappings":"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","file":"static/js/10.bfc36574.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst checkExistingUserQuery = gql`\n  query existingUser($email: String!) {\n    existingUser(email: $email) {\n      email\n      _id\n    }\n  }\n`;\n\nconst getBeersQuery = gql`\n  query {\n    beers {\n      name\n      _id\n      country\n      state\n      city\n      rate\n      date\n      breweryName\n      description\n    }\n  }\n`;\n\nconst getBeerQuery = gql`\n  query beer ($id: ID!){\n    beer (_id:$id) {\n      name\n      _id\n      country\n      state\n      city\n      rate\n      date\n      breweryName\n      description\n    }\n  }\n`;\n\nconst getBreweryQuery = gql`\n  query {\n    brewerys {\n      name\n      _id\n    }\n  }\n`\n\n\nexport { checkExistingUserQuery, getBeersQuery, getBeerQuery, getBreweryQuery };","import React, { Component } from 'react';\n// import obj from './home.module.scss';\nimport { graphql, compose, Query, ApolloConsumer } from 'react-apollo';\nimport { CREATE_USER } from '../../queries/mutations';\nimport { checkExistingUserQuery } from '../../queries/queries';\nimport axios from 'axios';\n\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete\n} from 'antd';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\n\nclass RegistrationForm extends Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: []\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    let formData = this.props.form.getFieldsValue();\n\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n\n    this.props\n      .CREATE_USER({\n        variables: {\n          userInput: formData\n        }\n      })\n      .then(resp => {\n        console.log(resp);\n      });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('pwd')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirmPwd'], { force: true });\n    }\n    callback();\n  };\n\n\n  checkExistingUser = async (rule, value, callback) => {\n    let { data } = await axios.post(\n      'http://127.0.0.1:8000/api/checkUserEmail',\n      {\n        email: value\n      }\n    );\n    console.log(data.error);\n    if(data.error === 1) {\n      console.log(data.msg);\n      callback(data.msg);\n    } else {\n      callback();\n    }\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '1'\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"1\">+1</Option>\n        <Option value=\"86\">+86</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Form\n        {...formItemLayout}\n        onSubmit={this.handleSubmit}\n        style={{ maxWidth: 600 }}\n      >\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            validate: [\n              {\n                trigger: 'onBlur',\n                rules: [\n                  {\n                    validator: this.checkExistingUser\n                  },\n                  {\n                    type: 'email',\n                    message: 'The input is not valid E-mail!'\n                  },\n                  {\n                    required: true,\n                    message: 'Please input your E-mail!'\n                  }\n                ]\n              },\n              {\n                trigger: 'onChange',\n                rules: [\n                  {\n                    type: 'email',\n                    message: 'The input is not valid E-mail!'\n                  },\n                  {\n                    required: true,\n                    message: 'Please input your E-mail!'\n                  }\n                ]\n              }\n            ]\n          })(<Input />)}\n          {/* onBlur={this.checkExistingUser} */}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('pwd', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!'\n              },\n              {\n                validator: this.validateToNextPassword\n              }\n            ]\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirmPwd', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!'\n              },\n              {\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('nickname', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your nickname!',\n                whitespace: true\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              First Name&nbsp;\n              <Tooltip title=\"First Name\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('firstName', {\n            rules: [\n              {\n                required: false,\n                message: 'Please input your firstname!',\n                whitespace: false\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              Last Name&nbsp;\n              <Tooltip title=\"Last Name\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('lastName', {\n            rules: [\n              {\n                required: false,\n                message: 'Please input your lastname!',\n                whitespace: false\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n\n        <Form.Item label=\"Phone Number\">\n          {getFieldDecorator('phoneNumber', {\n            rules: [\n              {\n                required: false,\n                message: 'Please input your phone number!'\n              }\n            ]\n          })(\n            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n          )}\n        </Form.Item>\n        {/* <Form.Item label=\"Website\">\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }]\n          })(\n            <AutoComplete\n              dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>\n          )}\n        </Form.Item> */}\n        {/* <Form.Item\n          label=\"Captcha\"\n          extra=\"We must make sure that your are a human.\"\n        >\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [\n                  {\n                    required: true,\n                    message: 'Please input the captcha you got!'\n                  }\n                ]\n              })(<Input />)}\n            </Col>\n            <Col span={12}>\n              <Button>Get captcha</Button>\n            </Col>\n          </Row>\n        </Form.Item> */}\n        <Form.Item {...tailFormItemLayout}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked'\n          })(\n            <Checkbox>\n              I have read the <a href=\"\">agreement</a>\n            </Checkbox>\n          )}\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    console.log(this.props.form.getFieldsValue());\n  }\n  componentDidUpdate() {}\n}\n\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(\n  RegistrationForm\n);\n\nexport default compose(\n  graphql(CREATE_USER, {\n    name: 'CREATE_USER'\n  }),\n  graphql(checkExistingUserQuery, {\n    name: 'checkExistingUserQuery'\n  })\n)(WrappedRegistrationForm);\n"],"sourceRoot":""}